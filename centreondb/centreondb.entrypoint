#!/bin/sh

while [ -z "${IP_ADDR}" ]; do IP_ADDR="$(hostname -i)"; done

cat <<EOF
##########  Centreon database  ##########
ADDRESS  : $IP_ADDR
HOSTNAME : $HOSTNAME
TIMEZONE : $(cat /etc/timezone)
BUSYBOX  : $(busybox |head -1 |awk '{print $2}')
MYSQLD   : $(mysqld --version |awk '{print $3}')
#########################################
EOF

MARIADB_PID_FILE=/run/mysqld/mysqld.pid
NRPE_PID_FILE=/var/run/nrpe.pid
DATADIR=/var/lib/mysql

# We go for MariaDB server setup only if /var/lib/mysql/mysql isn’t already a directory.
if [ ! -d "$DATADIR/mysql" ]
then
    echo "MariaDB Initial setup…"
    mysql_install_db --force --skip-auth-anonymous-user --user=mysql
    (mysqld_safe --pid-file="$MARIADB_PID_FILE" --datadir="$DATADIR" &) &&\
    sleep 4 &&\
    # Authorize root for the host named "centreon". This is needed by the Centreon setup process and may be removed afterward.
    echo "Setting privileges for the Centreon server…" &&\
    mysql -e "GRANT ALL PRIVILEGES ON *.* TO 'root'@'centreon.%' IDENTIFIED BY \"$MARIADB_ROOT_PASSWD\" WITH GRANT OPTION" &&\
    mysql -e "GRANT PROXY ON ''@'%' TO 'root'@'centreon.%' WITH GRANT OPTION" &&\
    # The following grants should not be necessary (as it’s done by the Centreon setup process). It probably could be removed.
    mysql -e "GRANT ALL PRIVILEGES ON centreon.* TO 'centreon'@'centreon.%' IDENTIFIED BY \"$CENTREON_DB_PASSWD\"" &&\
    mysql -e "GRANT ALL PRIVILEGES ON centreon_storage.* TO 'centreon'@'centreon.%' IDENTIFIED BY \"$CENTREON_DB_PASSWD\"" &&\
    mysql -e "FLUSH PRIVILEGES" &&\
    echo "Setting MariaDB root password…" &&\
    mysqladmin -u root password "$MARIADB_ROOT_PASSWD" &&\
    kill -15 $(cat $MARIADB_PID_FILE) &&\
    echo "MariaDB initial setup OK."
    sleep 4 # LaRache© (let enough time for MariaDB to stop…)
else
    echo "Directory $DATADIR/mysql exists. Continuing…"
fi

# Start
echo "Starting MariaDB…"

# Unset somme variables
export MARIADB_ROOT_PASSWD=''
export CENTREON_DB_PASSWD=''

# As mysqld is not our main process it won’t get the SIGTERM which is sent when the container is asked to stop, so trap and pass it.
# Also trap SIGINT, SIGQUIT and SIGSTOP
mariadb_stop() { echo " * MariaDB is shutting down…"
                 kill -15 $(cat "$MARIADB_PID_FILE")
                 kill -15 $(cat "$NRPE_PID_FILE")
                 kill -15 $DUMMY_PROCESS_PID
                 exit 0; }

trap mariadb_stop 2 3 15 19

mysqld_safe --pid-file="$MARIADB_PID_FILE" --datadir="$DATADIR" --log-error="mariadb.err" --user=mysql &

while [ -z "$(pidof 'mysqld')" ]; do
    sleep 1
    echo -n "."
done

echo -e " MariaDB is running.\n"

echo -e " * Starting NRPE… \n"
/usr/bin/nrpe -c /etc/nrpe.cfg -d &

# Start a dummy process which never terminates, to prevent the entrypoint to terminate itself if all its children have restarted…
tail -f /dev/null &
DUMMY_PROCESS_PID=$!

wait



